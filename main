#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<stdlib.h>

struct currentValidID{
    int year;
    char branch[6];
    int totalVoters;
}currentValidID;

  typedef struct candidate{
    int cid;
    char cname[20];
    int votes;
}CANDIDATE;


//struct currentValidID currentValidID; //stores current Valid user ID parameters
CANDIDATE candidateArray[20]; //to store information all candidates
int no_Candidates; 
char studentVotes[200]; //to store information of votes given by each student


//To extract year from userID 
int extractYear(char userID[15])
{
    int year=0;
    char tmp;
    for(int i=0;i<4;i++){
        tmp=userID[i];
		year=(year*10)+(tmp-48);
    }
    return year;
}
//To extract rollno from user ID
int extractRollNo(char userID[15])
{
    int rollno=0;
    char tmp;
    for(int i=9;i<14;i++){
        tmp=userID[i];
		rollno=(rollno*10)+(tmp-48);
    }
    return rollno;
}

//Will check whether the global branch code and inputed branch code is matching or not
int checkBranchCode(char userID[15])
{
    char branchCode[6];
    for(int i=4;i<9;i++){
        branchCode[i-4]=userID[i];
    }
    branchCode[5]='\0';
    if(strcmp(branchCode,currentValidID.branch)==0)
        return 1;
    else
        return 0;
}

int authenticateAdmin(){
    char username[15], password[6];
    
    printf("\nEnter username: ");
    int k=0;
   
    scanf("%s",username);
   
    if((strcmp(username,"abin"))!=0)
        return 0;
    else
    {
        printf("Enter Password: ");
        int i=0;
        for(i=0;i<3;i++)
        {
            password[i]=getch();
            printf("%c",'*');
        }
        password[i]='\0';
        if((strcmp(password,"333"))!=0)
            return 0;
    }
    return 1;
}

void banID(){

    FILE *fp=fopen("Banned.txt", "w");//file created for store data of baned IDs
    if(fp==NULL){
        printf("Error: Banned.txt not created.\n");
        fclose(fp);
        return;
    }
    printf("\n\n\t\t-----------------------------------------------\n");
	printf("\t\t              BAN USER_ID                      \n");
	printf("\t\t-----------------------------------------------\n");
    printf("\n\nJust Enter last roll no to ban\n\nPress 0 to exit... ");
    int roll_no;
    while(1){
        printf("\nEnter Number: ");
        scanf("%d",&roll_no);
        if(roll_no==0)
            break;
        studentVotes[roll_no-1]='$';
        fprintf(fp,"%d\n",roll_no);
    }
    fclose(fp);
    printf("Created Successfully\n");
    getch();
    system("cls");
}
//creating files for each candidate
void createCandidateFiles(){
   // printf("\nCreating candidate files...\n");
    FILE *fp;
	char filename[20];
    for(int i = 1;i <= no_Candidates; i++){
        sprintf(filename,"candidate%d.txt",i);
		fp=fopen(filename,"w");
        fprintf(fp,"0\n%s",candidateArray[i-1].cname );
		fclose(fp);
    }
    printf(" \nFile for candidates is created successfully\n");
    getch();
    system("cls");
    
}


int getWinner(){
	system("cls");
	printf("\t\t################################################################\n");
	printf("\t\t************************* RESULT *******************************\n");
	printf("\t\t*************************        *******************************\n");
	printf("\t\t################################################################\n");
    int maxV = -1;
    int winnerCid;
    for(int i = 0;i < no_Candidates; i++){
        if(candidateArray[i].votes > maxV) {
            winnerCid = candidateArray[i].cid;
            maxV = candidateArray[i].votes;      
        }
        else if(candidateArray[i].votes == maxV) {
            return -1;
        }
    }
    return winnerCid;
}

void Election()
{   
    system("cls");
    printf("\t\t###################################################################\n");
    printf("\t\t*********************** New Election Initiation *******************\n");
    printf("\t\t***********************                         *******************\n");
    printf("\t\t###################################################################\n");
    printf("\nElections for which Year(yyyy): ");
    scanf("%d",&currentValidID.year);
    printf("\nEnter branch code (must contains 5 characters):");
    scanf("%s",currentValidID.branch);
    printf("\nEnter no. of total voters :");
    scanf("%d",&currentValidID.totalVoters);
    printf("\nEnter the no. of candidates:");
    scanf("%d",&no_Candidates);

   for (int i = 0; i < currentValidID.totalVoters; i++)
    {
        studentVotes[i] = '0';
    }

    for (int i = 0;i < no_Candidates; i++)
    {
        candidateArray[i].cid=i+1;
        printf("\nEnter name of candidate %d: ",i+1);
        scanf(" %s",candidateArray[i].cname);
        candidateArray[i].votes=0;
    }
    return;
}
void welcome_admin()
{
  	printf("\t\t#################################################\n");
	printf("\t\t***************** ADMIN LOGIN *******************\n");
	printf("\t\t*****************             *******************\n");
	printf("\t\t#################################################\n");	
}

void adminPanel()
{
	welcome_admin();
    while(1)
	{
        
        if(authenticateAdmin()!=1){
        	printf("\t\t ooops...\n");
            printf("\n Wrong Username or Password \n");            
            break;
        }

        printf("\n\nLOGGED IN SUCCESSFULLY (Press Enter)");
		getch();
		system("cls");

        while(1)
        {
            char d_id[15];
            char input, banInp;
            int WinnerCid, totalVotedNow=0;
            welcome_admin();
            printf("\n1.Declare Election\n2.Ban User IDs\n3.Result\n4.Logout\nOption:");
			scanf(" %c",&input);
			system("cls");

            switch(input)
            {
                case '1':
                    Election();
                    createCandidateFiles();
                    break;
                case '2':
                    printf("Do you want to ban particular ID's?\n\nPress 1 if yes or any other key to continue...");
                    scanf(" %c",&banInp);
                    if(banInp=='1'){
                        banID();
                    }
                    break;
                case '3':
                    WinnerCid = getWinner();
                    if(WinnerCid != -1){
                        printf("\nWinner is %s with %d votes\n",candidateArray[WinnerCid-1].cname,candidateArray[WinnerCid-1].votes);
                    }
                    else{
                        printf("\nIts A TIE");
                    }
                    printf("\nFull Result\n");
                    for(int i=0;i<no_Candidates;i++){
                        totalVotedNow+=candidateArray[i].votes;
                        printf("%d. %s -> %d votes\n",candidateArray[i].cid,candidateArray[i].cname,candidateArray[i].votes);
                    }
                    printf("\nVoting Percentage: %d %%\n\n",(totalVotedNow*100)/currentValidID.totalVoters);
                    getch();
                    system("cls");
                    break;
                case '4':
                    return;
                default:
                    printf("Invalid Option");
					getch();
            }
			
        }
    }

};


int isValid(char userID[15])
{
    if(strlen(userID)!=14)
        return 0;
    
    int inputedYear=extractYear(userID);
    int inputedRollNo = extractRollNo(userID);
    
    if(inputedYear!=currentValidID.year || checkBranchCode(userID)!=1 || inputedRollNo>currentValidID.totalVoters)
        return 0;

    return 1;
}

int isVoted(char userID[15])
{
    int location=extractRollNo(userID);
    if(studentVotes[location-1]=='0')
        return 0;
    else
        return 1;
}

int isBanned(char userID[15]){
    int location=extractRollNo(userID);
    if(studentVotes[location-1]=='$')
        return 1;
    else
        return 0;
}

void saveVote(char userID[15],char voteInput)
{
    char filename[20];
    sprintf(filename,"candidate%d.txt",voteInput-48);
    FILE *fp = fopen(filename,"r+");
    int location=extractRollNo(userID);
    studentVotes[location-1]=voteInput;
    candidateArray[voteInput-49].votes++;
    fseek(fp, 0, SEEK_SET);
    fprintf(fp,"%d\n",candidateArray[voteInput-49].votes);
    fseek(fp, 0, SEEK_END);
    fprintf(fp,"\n%d",location);
    fclose(fp);
}

void welcome_student()
{
	printf("\n\t\t##################################################\n");
	printf("\t\t***************** STUDENT LOGIN ******************\n");
	printf("\t\t*****************               ******************\n");
	printf("\t\t##################################################\n");
}
void studentPanel()
{
    char userID[15];
    char  voteInput;

    while(1)
	{   
	   welcome_student();
		printf("\n\n  To exit press 0");
        printf("\n  Enter user ID   (user_id is in the form of yyyybbbbbrrrrr):");
        scanf("%s",userID);
        if(strcmp(userID, "0")==0)
				return;
        if(isValid(userID)!=1)
        {
            printf("\n User ID is Invalid\n(Press Enter)\n");
            getch();
            system("cls");
            continue;
        }
        if(isBanned(userID)!=0)
        {
            printf("\nYour User ID is currently banned...\n(Press Enter to continue)");
            getch();
            system("cls");
            continue;
        }
        if(isVoted(userID)!=0)
        {
            printf("\n   already voted\n ");
            getch();
            system("cls");
            continue;
        }
		system("cls");
        welcome_student();
        printf("\n\n  Candidates for election:");
		for (int i = 0; i < no_Candidates; i++)
        {
            printf("\n  %d. %s",i+1,candidateArray[i].cname);
        }
        printf("\n\n  Your Vote(Enter Number):");
        voteInput=getch();
        printf("*\n\n");
        if(voteInput-48 < 1 || voteInput-48 > no_Candidates)
        {
            printf("\nInvalid Vote\nTry Again...\n");
            getch();
            system("cls");
            continue;
        }
        saveVote(userID,voteInput);
        printf("\t\t++++++++++++++++++++++++++++++++++++++++++++++\n");
        printf("\t\t   Thanks for your voting (Press Enter)\n");
        printf("\t\t++++++++++++++++++++++++++++++++++++++++++++++\n");
        getch();
        system("cls");
    }
}

int main()
{
    while(1)
	{   
	     printf("\t\t#################################################\n");
       	printf("\t\t***************** VOTING PANEL ******************\n");
    	printf("\t\t*****************             *******************\n");
	    printf("\t\t#################################################\n");
        printf("\n\t\t\t   1.Admin panel \n\t\t\t   2.Student panel \n\t\t\t   3.Exit \n\t\t\t   Option:");
		char choice;
        scanf(" %c",&choice);
        system("cls");

        switch(choice){
            case '1':adminPanel();
                     break;
            case '2':studentPanel();
                     system("cls");
                     break;
            case '3':return 0;
            default:printf("\nInvalid option");
                    getch();
        }
    }
    return 0;
}
	
